import streamlit as st
import cv2
import numpy as np
from PIL import Image
import os
import io
import pandas as pd
from utils.ocr import qr_code_detection, OCR_img

def parse_qr_result(qr_string):
    """
    Ph√¢n t√≠ch chu·ªói QR code v√† tr·∫£ v·ªÅ th√¥ng tin c√≥ c·∫•u tr√∫c
    Format: cccd|cmnd|h·ªç v√† t√™n|ng√†y th√°ng nƒÉm sinh|gi·ªõi t√≠nh|N∆°i th∆∞·ªùng tr√∫|ng√†y th√°ng nƒÉm c·∫•p|...
    """
    try:
        # T√°ch chu·ªói theo d·∫•u |
        parts = qr_string.split('|')
        
        if len(parts) >= 7:
            parsed_info = {
                'S·ªë CCCD/CMND': parts[0] if parts[0] else 'Kh√¥ng c√≥',
                'S·ªë CMND c≈©': parts[1] if parts[1] else 'Kh√¥ng c√≥',
                'H·ªç v√† t√™n': parts[2] if parts[2] else 'Kh√¥ng c√≥',
                'Ng√†y sinh': parts[3] if parts[3] else 'Kh√¥ng c√≥',
                'Gi·ªõi t√≠nh': parts[4] if parts[4] else 'Kh√¥ng c√≥',
                'N∆°i th∆∞·ªùng tr√∫': parts[5] if parts[5] else 'Kh√¥ng c√≥',
                'Ng√†y c·∫•p': parts[6] if parts[6] else 'Kh√¥ng c√≥',
            }
            
            # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y sinh
            if parsed_info['Ng√†y sinh'] != 'Kh√¥ng c√≥' and len(parsed_info['Ng√†y sinh']) == 8:
                date_str = parsed_info['Ng√†y sinh']
                formatted_date = f"{date_str[0:2]}/{date_str[2:4]}/{date_str[4:8]}"
                parsed_info['Ng√†y sinh'] = formatted_date
            
            # X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ng√†y c·∫•p
            if parsed_info['Ng√†y c·∫•p'] != 'Kh√¥ng c√≥' and len(parsed_info['Ng√†y c·∫•p']) == 8:
                date_str = parsed_info['Ng√†y c·∫•p']
                formatted_date = f"{date_str[0:2]}/{date_str[2:4]}/{date_str[4:8]}"
                parsed_info['Ng√†y c·∫•p'] = formatted_date
            
            return parsed_info
        else:
            return {'L·ªói': 'ƒê·ªãnh d·∫°ng QR code kh√¥ng ƒë√∫ng', 'D·ªØ li·ªáu g·ªëc': qr_string}
            
    except Exception as e:
        return {'L·ªói': f'Kh√¥ng th·ªÉ ph√¢n t√≠ch: {str(e)}', 'D·ªØ li·ªáu g·ªëc': qr_string}

def display_parsed_info(parsed_info):
    """
    Hi·ªÉn th·ªã th√¥ng tin ƒë√£ ph√¢n t√≠ch d∆∞·ªõi d·∫°ng ƒë·∫πp m·∫Øt
    """
    st.success("‚úÖ Ph√¢n t√≠ch th√¥ng tin QR code th√†nh c√¥ng!")
    
    # T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
    info_col1, info_col2 = st.columns(2)
    
    with info_col1:
        st.markdown("### üë§ **Th√¥ng tin c√° nh√¢n**")
        st.markdown(f"**üÜî S·ªë CCCD/CMND:** {parsed_info.get('S·ªë CCCD/CMND', 'N/A')}")
        st.markdown(f"**üéÇ Ng√†y sinh:** {parsed_info.get('Ng√†y sinh', 'N/A')}")
        st.markdown(f"**‚öß Gi·ªõi t√≠nh:** {parsed_info.get('Gi·ªõi t√≠nh', 'N/A')}")
        
    with info_col2:
        st.markdown("### üìÑ **Th√¥ng tin gi·∫•y t·ªù**") 
        st.markdown(f"**üìã S·ªë CMND c≈©:** {parsed_info.get('S·ªë CMND c≈©', 'N/A')}")
        st.markdown(f"**üìÖ Ng√†y c·∫•p:** {parsed_info.get('Ng√†y c·∫•p', 'N/A')}")
    
    st.markdown("### üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **Th√¥ng tin kh√°c**")
    st.markdown(f"**üìù H·ªç v√† t√™n:** {parsed_info.get('H·ªç v√† t√™n', 'N/A')}")
    st.markdown(f"**üè† N∆°i th∆∞·ªùng tr√∫:** {parsed_info.get('N∆°i th∆∞·ªùng tr√∫', 'N/A')}")
    
    # Hi·ªÉn th·ªã b·∫£ng th√¥ng tin d·∫°ng table
    st.markdown("---")
    st.markdown("### üìä **B·∫£ng th√¥ng tin chi ti·∫øt**")
    
    df_data = []
    for key, value in parsed_info.items():
        if key not in ['L·ªói', 'D·ªØ li·ªáu g·ªëc']:
            df_data.append({'Th√¥ng tin': key, 'Gi√° tr·ªã': value})
    
    if df_data:
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True, hide_index=True)

def process_images(front_image, back_image, cccd_type):
    """
    X·ª≠ l√Ω ·∫£nh t√πy theo lo·∫°i CCCD v·ªõi 2 ·∫£nh ƒë∆∞·ª£c upload c√πng l√∫c
    """
    results = {}
    
    if cccd_type == "CCCD M·ªõi":
        # CCCD M·ªõi: Qu√©t QR ·ªü m·∫∑t sau, OCR ·ªü m·∫∑t tr∆∞·ªõc
        if back_image is not None:
            st.info("üîç ƒêang qu√©t QR code ·ªü m·∫∑t sau CCCD m·ªõi...")
            
            # Chuy·ªÉn ƒë·ªïi ·∫£nh m·∫∑t sau th√†nh OpenCV image
            back_file_bytes = np.asarray(bytearray(back_image.read()), dtype=np.uint8)
            back_img = cv2.imdecode(back_file_bytes, 1)
            
            # Qu√©t QR code v·ªõi nhi·ªÅu scale kh√°c nhau
            qr_result = None
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, scale in enumerate([1, 2, 3]):
                status_text.text(f"ƒêang th·ª≠ scale {scale}...")
                progress_bar.progress((i + 1) / 3)
                qr_result = qr_code_detection(back_img, scale=scale)
                if qr_result:
                    break
            
            progress_bar.empty()
            status_text.empty()
            
            if qr_result:
                results['qr_code'] = qr_result
                st.success("‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c QR code!")
                st.text_area("K·∫øt qu·∫£ QR code:", qr_result, height=100)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng qu√©t ƒë∆∞·ª£c QR code, chuy·ªÉn sang OCR m·∫∑t tr∆∞·ªõc...")
                results['qr_code'] = None
                
                if front_image is not None:
                    # Chuy·ªÉn ƒë·ªïi ·∫£nh m·∫∑t tr∆∞·ªõc th√†nh OpenCV image
                    front_file_bytes = np.asarray(bytearray(front_image.read()), dtype=np.uint8)
                    front_img = cv2.imdecode(front_file_bytes, 1)
                    
                    st.info("üîç ƒêang th·ª±c hi·ªán OCR...")
                    ocr_result = OCR_img(front_img)
                    results['ocr_text'] = ocr_result
                    
                    st.success("‚úÖ Ho√†n th√†nh OCR!")
                    st.text_area("K·∫øt qu·∫£ OCR:", '\n'.join(ocr_result), height=200)
                else:
                    st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t tr∆∞·ªõc ƒë·ªÉ th·ª±c hi·ªán OCR!")
        else:
            st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t sau ƒë·ªÉ qu√©t QR code!")
    
    elif cccd_type == "CCCD C≈©":
        # CCCD C≈©: Qu√©t QR ·ªü m·∫∑t tr∆∞·ªõc, OCR ·ªü m·∫∑t tr∆∞·ªõc
        if front_image is not None:
            st.info("üîç ƒêang qu√©t QR code ·ªü m·∫∑t tr∆∞·ªõc CCCD c≈©...")
            
            # Chuy·ªÉn ƒë·ªïi ·∫£nh m·∫∑t tr∆∞·ªõc th√†nh OpenCV image
            front_file_bytes = np.asarray(bytearray(front_image.read()), dtype=np.uint8)
            front_img = cv2.imdecode(front_file_bytes, 1)
            
            # Qu√©t QR code v·ªõi nhi·ªÅu scale kh√°c nhau
            qr_result = None
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, scale in enumerate([1, 2, 3]):
                status_text.text(f"ƒêang th·ª≠ scale {scale}...")
                progress_bar.progress((i + 1) / 3)
                qr_result = qr_code_detection(front_img, scale=scale)
                if qr_result:
                    break
            
            progress_bar.empty()
            status_text.empty()
            
            if qr_result:
                results['qr_code'] = qr_result
                st.success("‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c QR code!")
                st.text_area("K·∫øt qu·∫£ QR code:", qr_result, height=100)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng qu√©t ƒë∆∞·ª£c QR code, chuy·ªÉn sang OCR...")
                results['qr_code'] = None
                
                # Th·ª±c hi·ªán OCR tr√™n c√πng ·∫£nh m·∫∑t tr∆∞·ªõc
                st.info("üîç ƒêang th·ª±c hi·ªán OCR...")
                ocr_result = OCR_img(front_img)
                results['ocr_text'] = ocr_result
                
                st.success("‚úÖ Ho√†n th√†nh OCR!")
                st.text_area("K·∫øt qu·∫£ OCR:", '\n'.join(ocr_result), height=200)
        else:
            st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t tr∆∞·ªõc ƒë·ªÉ qu√©t QR code!")
    
    return results

def capture_image_from_camera():
    """
    Ch·ª•p ·∫£nh t·ª´ camera s·ª≠ d·ª•ng st.camera_input
    """
    camera_photo = st.camera_input("üì∏ Ch·ª•p ·∫£nh t·ª´ camera")
    
    if camera_photo is not None:
        # Chuy·ªÉn ƒë·ªïi th√†nh PIL Image
        image = Image.open(camera_photo)
        return image
    return None

def convert_pil_to_opencv(pil_image):
    """
    Chuy·ªÉn ƒë·ªïi PIL Image th√†nh OpenCV image
    """
    if pil_image is not None:
        # Chuy·ªÉn PIL image th√†nh numpy array
        numpy_image = np.array(pil_image)
        # Chuy·ªÉn t·ª´ RGB sang BGR (OpenCV format)
        opencv_image = cv2.cvtColor(numpy_image, cv2.COLOR_RGB2BGR)
        return opencv_image
    return None

def process_images_from_source(front_source, back_source, cccd_type):
    """
    X·ª≠ l√Ω ·∫£nh t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau (upload file ho·∫∑c camera)
    """
    results = {}
    front_img = None
    back_img = None
    
    # X·ª≠ l√Ω ·∫£nh m·∫∑t tr∆∞·ªõc
    if front_source is not None:
        if hasattr(front_source, 'read'):  # File upload
            front_file_bytes = np.asarray(bytearray(front_source.read()), dtype=np.uint8)
            front_img = cv2.imdecode(front_file_bytes, 1)
        else:  # PIL Image t·ª´ camera
            front_img = convert_pil_to_opencv(front_source)
    
    # X·ª≠ l√Ω ·∫£nh m·∫∑t sau
    if back_source is not None:
        if hasattr(back_source, 'read'):  # File upload
            back_file_bytes = np.asarray(bytearray(back_source.read()), dtype=np.uint8)
            back_img = cv2.imdecode(back_file_bytes, 1)
        else:  # PIL Image t·ª´ camera
            back_img = convert_pil_to_opencv(back_source)
    
    # Logic x·ª≠ l√Ω t∆∞∆°ng t·ª± nh∆∞ function c≈©
    if cccd_type == "CCCD M·ªõi":
        # CCCD M·ªõi: Qu√©t QR ·ªü m·∫∑t sau, OCR ·ªü m·∫∑t tr∆∞·ªõc
        if back_img is not None:
            st.info("üîç ƒêang qu√©t QR code ·ªü m·∫∑t sau CCCD m·ªõi...")
            
            # Qu√©t QR code v·ªõi nhi·ªÅu scale kh√°c nhau
            qr_result = None
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, scale in enumerate([1, 2, 3]):
                status_text.text(f"ƒêang th·ª≠ scale {scale}...")
                progress_bar.progress((i + 1) / 3)
                qr_result = qr_code_detection(back_img, scale=scale)
                if qr_result:
                    break
            
            progress_bar.empty()
            status_text.empty()
            
            if qr_result:
                results['qr_code'] = qr_result
                st.success("‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c QR code!")
                
                # Ph√¢n t√≠ch v√† hi·ªÉn th·ªã th√¥ng tin QR
                parsed_info = parse_qr_result(qr_result)
                if 'L·ªói' in parsed_info:
                    st.warning("‚ö†Ô∏è C√≥ l·ªói khi ph√¢n t√≠ch QR code:")
                    st.error(parsed_info['L·ªói'])
                    st.text_area("D·ªØ li·ªáu QR g·ªëc:", qr_result, height=100)
                else:
                    display_parsed_info(parsed_info)
                    
                    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc trong expander
                    with st.expander("üîç Xem d·ªØ li·ªáu QR g·ªëc"):
                        st.code(qr_result)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng qu√©t ƒë∆∞·ª£c QR code, chuy·ªÉn sang OCR m·∫∑t tr∆∞·ªõc...")
                results['qr_code'] = None
                
                if front_img is not None:
                    st.info("üîç ƒêang th·ª±c hi·ªán OCR...")
                    ocr_result = OCR_img(front_img)
                    results['ocr_text'] = ocr_result
                    
                    st.success("‚úÖ Ho√†n th√†nh OCR!")
                    st.text_area("K·∫øt qu·∫£ OCR:", '\n'.join(ocr_result), height=200)
                else:
                    st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t tr∆∞·ªõc ƒë·ªÉ th·ª±c hi·ªán OCR!")
        else:
            st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t sau ƒë·ªÉ qu√©t QR code!")
    
    elif cccd_type == "CCCD C≈©":
        # CCCD C≈©: Qu√©t QR ·ªü m·∫∑t tr∆∞·ªõc, OCR ·ªü m·∫∑t tr∆∞·ªõc
        if front_img is not None:
            st.info("üîç ƒêang qu√©t QR code ·ªü m·∫∑t tr∆∞·ªõc CCCD c≈©...")
            
            # Qu√©t QR code v·ªõi nhi·ªÅu scale kh√°c nhau
            qr_result = None
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, scale in enumerate([1, 2, 3]):
                status_text.text(f"ƒêang th·ª≠ scale {scale}...")
                progress_bar.progress((i + 1) / 3)
                qr_result = qr_code_detection(front_img, scale=scale)
                if qr_result:
                    break
            
            progress_bar.empty()
            status_text.empty()
            
            if qr_result:
                results['qr_code'] = qr_result
                st.success("‚úÖ ƒê√£ qu√©t ƒë∆∞·ª£c QR code!")
                
                # Ph√¢n t√≠ch v√† hi·ªÉn th·ªã th√¥ng tin QR
                parsed_info = parse_qr_result(qr_result)
                if 'L·ªói' in parsed_info:
                    st.warning("‚ö†Ô∏è C√≥ l·ªói khi ph√¢n t√≠ch QR code:")
                    st.error(parsed_info['L·ªói'])
                    st.text_area("D·ªØ li·ªáu QR g·ªëc:", qr_result, height=100)
                else:
                    display_parsed_info(parsed_info)
                    
                    # Hi·ªÉn th·ªã d·ªØ li·ªáu g·ªëc trong expander
                    with st.expander("üîç Xem d·ªØ li·ªáu QR g·ªëc"):
                        st.code(qr_result)
            else:
                st.warning("‚ö†Ô∏è Kh√¥ng qu√©t ƒë∆∞·ª£c QR code, chuy·ªÉn sang OCR...")
                results['qr_code'] = None
                
                # Th·ª±c hi·ªán OCR tr√™n c√πng ·∫£nh m·∫∑t tr∆∞·ªõc
                st.info("üîç ƒêang th·ª±c hi·ªán OCR...")
                ocr_result = OCR_img(front_img)
                results['ocr_text'] = ocr_result
                
                st.success("‚úÖ Ho√†n th√†nh OCR!")
                st.text_area("K·∫øt qu·∫£ OCR:", '\n'.join(ocr_result), height=200)
        else:
            st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t tr∆∞·ªõc ƒë·ªÉ qu√©t QR code!")
    
    return results

def main():
    st.set_page_config(
        page_title="CCCD Scanner",
        page_icon="üÜî",
        layout="wide"
    )
    
    st.title("üÜî ·ª®ng d·ª•ng qu√©t CCCD")
    st.markdown("---")
    
    # Sidebar cho c·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        # Ch·ªçn lo·∫°i CCCD
        cccd_type = st.selectbox(
            "Ch·ªçn lo·∫°i CCCD:",
            options=["CCCD M·ªõi", "CCCD C≈©"],
            help="CCCD M·ªõi: Qu√©t QR ·ªü m·∫∑t sau | CCCD C≈©: Qu√©t QR ·ªü m·∫∑t tr∆∞·ªõc"
        )
        
        # Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh
        input_method = st.radio(
            "Ph∆∞∆°ng th·ª©c nh·∫≠p ·∫£nh:",
            options=["üìÅ Upload file", "üì∏ Ch·ª•p camera"],
            help="Ch·ªçn c√°ch th·ª©c ƒë·ªÉ l·∫•y ·∫£nh CCCD"
        )
        
        st.markdown("---")
        st.markdown("### üìã H∆∞·ªõng d·∫´n:")
        if input_method == "üìÅ Upload file":
            if cccd_type == "CCCD M·ªõi":
                st.markdown("""
                1. Upload ·∫£nh **m·∫∑t sau** (b·∫Øt bu·ªôc) ƒë·ªÉ qu√©t QR code
                2. Upload ·∫£nh **m·∫∑t tr∆∞·ªõc** (t√πy ch·ªçn) ƒë·ªÉ OCR khi QR th·∫•t b·∫°i
                3. Nh·∫•n "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"
                """)
            else:
                st.markdown("""
                1. Upload ·∫£nh **m·∫∑t tr∆∞·ªõc** (b·∫Øt bu·ªôc) ƒë·ªÉ qu√©t QR code
                2. ·∫¢nh m·∫∑t sau kh√¥ng c·∫ßn thi·∫øt cho CCCD c≈©
                3. Nh·∫•n "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"
                """)
        else:  # Camera
            if cccd_type == "CCCD M·ªõi":
                st.markdown("""
                1. Ch·ª•p ·∫£nh **m·∫∑t sau** (b·∫Øt bu·ªôc) ƒë·ªÉ qu√©t QR code
                2. Ch·ª•p ·∫£nh **m·∫∑t tr∆∞·ªõc** (t√πy ch·ªçn) ƒë·ªÉ OCR khi QR th·∫•t b·∫°i
                3. Nh·∫•n "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"
                """)
            else:
                st.markdown("""
                1. Ch·ª•p ·∫£nh **m·∫∑t tr∆∞·ªõc** (b·∫Øt bu·ªôc) ƒë·ªÉ qu√©t QR code
                2. ·∫¢nh m·∫∑t sau kh√¥ng c·∫ßn thi·∫øt cho CCCD c≈©
                3. Nh·∫•n "B·∫Øt ƒë·∫ßu x·ª≠ l√Ω"
                """)
        
        st.markdown("---")
        st.markdown("### ‚öôÔ∏è C·∫£i ti·∫øn:")
        st.markdown("""
        - üîÑ Th·ª≠ 3 scale kh√°c nhau (1‚Üí2‚Üí3) ƒë·ªÉ qu√©t QR
        - üì§ Upload file ho·∫∑c ch·ª•p camera
        - üì∏ Ch·ª•p tr·ª±c ti·∫øp t·ª´ camera
        - üéØ X·ª≠ l√Ω th√¥ng minh theo lo·∫°i CCCD
        """)
    
    # Main content
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header(f"üì§ {input_method} - {cccd_type}")
        
        front_source = None
        back_source = None
        
        if input_method == "üìÅ Upload file":
            # Giao di·ªán upload file
            upload_col1, upload_col2 = st.columns(2)
            
            with upload_col1:
                st.subheader("üìÑ ·∫¢nh m·∫∑t tr∆∞·ªõc")
                front_source = st.file_uploader(
                    "Upload ·∫£nh m·∫∑t tr∆∞·ªõc CCCD:",
                    type=['jpg', 'jpeg', 'png'],
                    help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG",
                    key="front_upload"
                )
                
                if front_source is not None:
                    image_front = Image.open(front_source)
                    st.image(image_front, caption="M·∫∑t tr∆∞·ªõc", use_container_width=True)
            
            with upload_col2:
                st.subheader("üìÑ ·∫¢nh m·∫∑t sau")
                back_source = st.file_uploader(
                    "Upload ·∫£nh m·∫∑t sau CCCD:",
                    type=['jpg', 'jpeg', 'png'],
                    help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG",
                    key="back_upload"
                )
                
                if back_source is not None:
                    image_back = Image.open(back_source)
                    st.image(image_back, caption="M·∫∑t sau", use_container_width=True)
        
        else:  # Camera input
            # Giao di·ªán ch·ª•p camera
            camera_col1, camera_col2 = st.columns(2)
            
            with camera_col1:
                st.subheader("üì∏ Ch·ª•p m·∫∑t tr∆∞·ªõc")
                with st.expander("üì∑ Camera m·∫∑t tr∆∞·ªõc", expanded=True):
                    front_camera = st.camera_input("Ch·ª•p ·∫£nh m·∫∑t tr∆∞·ªõc CCCD", key="front_camera")
                    if front_camera is not None:
                        front_source = Image.open(front_camera)
                        st.image(front_source, caption="M·∫∑t tr∆∞·ªõc (v·ª´a ch·ª•p)", use_container_width=True)
            
            with camera_col2:
                st.subheader("üì∏ Ch·ª•p m·∫∑t sau")
                with st.expander("üì∑ Camera m·∫∑t sau", expanded=True):
                    back_camera = st.camera_input("Ch·ª•p ·∫£nh m·∫∑t sau CCCD", key="back_camera")
                    if back_camera is not None:
                        back_source = Image.open(back_camera)
                        st.image(back_source, caption="M·∫∑t sau (v·ª´a ch·ª•p)", use_container_width=True)
        
        # N√∫t x·ª≠ l√Ω
        st.markdown("---")
        process_button = st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω", type="primary", use_container_width=True)
        
        if process_button:
            # Ki·ªÉm tra ·∫£nh c·∫ßn thi·∫øt theo lo·∫°i CCCD
            can_process = False
            
            if cccd_type == "CCCD M·ªõi":
                if back_source is not None:
                    can_process = True
                    if front_source is None:
                        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ ·∫£nh m·∫∑t tr∆∞·ªõc. N·∫øu QR kh√¥ng qu√©t ƒë∆∞·ª£c s·∫Ω kh√¥ng th·ªÉ OCR.")
                else:
                    st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t sau ƒë·ªÉ qu√©t QR code cho CCCD m·ªõi!")
            
            elif cccd_type == "CCCD C≈©":
                if front_source is not None:
                    can_process = True
                else:
                    st.error("‚ùå C·∫ßn ·∫£nh m·∫∑t tr∆∞·ªõc ƒë·ªÉ qu√©t QR code cho CCCD c≈©!")
            
            if can_process:
                # Reset file pointers n·∫øu l√† upload file
                if input_method == "üìÅ Upload file":
                    if front_source and hasattr(front_source, 'seek'):
                        front_source.seek(0)
                    if back_source and hasattr(back_source, 'seek'):
                        back_source.seek(0)
                
                # X·ª≠ l√Ω ·∫£nh
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    results = process_images_from_source(front_source, back_source, cccd_type)
    
    with col2:
        st.header("‚ÑπÔ∏è Th√¥ng tin")
        
        st.info(f"**Lo·∫°i CCCD:** {cccd_type}")
        
        if cccd_type == "CCCD M·ªõi":
            st.markdown("""
            **Quy tr√¨nh:**
            1. Qu√©t QR code ·ªü m·∫∑t sau (scale 1‚Üí3)
            2. N·∫øu th·∫•t b·∫°i ‚Üí OCR m·∫∑t tr∆∞·ªõc
            """)
        else:
            st.markdown("""
            **Quy tr√¨nh:**
            1. Qu√©t QR code ·ªü m·∫∑t tr∆∞·ªõc (scale 1‚Üí3)
            2. N·∫øu th·∫•t b·∫°i ‚Üí OCR m·∫∑t tr∆∞·ªõc
            """)
        
        st.markdown("---")
        st.markdown("### üîß T√≠nh nƒÉng:")
        st.markdown("""
        - ‚úÖ Qu√©t QR code t·ª± ƒë·ªông v·ªõi 3 scale
        - ‚úÖ OCR vƒÉn b·∫£n ti·∫øng Vi·ªát
        - ‚úÖ H·ªó tr·ª£ CCCD m·ªõi v√† c≈©
        - ‚úÖ Upload file ho·∫∑c ch·ª•p camera
        - üì∏ Ch·ª•p tr·ª±c ti·∫øp t·ª´ camera
        - ‚úÖ Giao di·ªán th√¢n thi·ªán
        """)

if __name__ == "__main__":
    main()